import os
import subprocess
import time

# Path to VLC executable
VLC_PATH = r"C:\Program Files\VideoLAN\VLC\vlc.exe"

# Directory containing malformed files
MALFORMED_FILES_DIR = r"A:\PROJECTS\VLC-Media-Player-Fuzzing-Framework\modules\malformed_samples"

# Path to save the consolidated log
LOG_FILE = r"modules\crash_log.txt"


def run_vlc_with_logging(file_path):
    """
    Runs VLC with the specified file and captures errors in the log.
    """
    log_entry = f"\nTesting file: {file_path}\n"
    log_entry += "=" * 60 + "\n"

    try:
        command = [
            VLC_PATH,
            "--intf", "dummy",
            "--play-and-exit",
            "--file-logging",
            "--logfile", "vlc_temp_log.txt",
            file_path,
        ]

        # Run VLC as a subprocess
        subprocess.run(command, timeout=30)  # Timeout after 30 seconds

        # Read the temporary log file
        if os.path.exists("vlc_temp_log.txt"):
            with open("vlc_temp_log.txt", "r") as temp_log:
                log_entry += temp_log.read()
            os.remove("vlc_temp_log.txt")
        else:
            log_entry += "No log generated by VLC.\n"
    except subprocess.TimeoutExpired:
        log_entry += "Error: VLC timed out while processing the file.\n"
    except Exception as e:
        log_entry += f"Error: {str(e)}\n"

    return log_entry


def main():
    """
    Scans the malformed files directory and logs VLC's behavior for each file.
    """
    # Start writing to the log file
    with open(LOG_FILE, "w") as log:
        log.write("Crash Log for Malformed Files\n")
        log.write("=" * 60 + "\n\n")

        # Loop through all files in the malformed files directory
        for root, _, files in os.walk(MALFORMED_FILES_DIR):
            for file_name in files:
                file_path = os.path.join(root, file_name)
                # Run VLC and capture its behavior
                log_entry = run_vlc_with_logging(file_path)
                log.write(log_entry)
                log.write("\n")
                print(f"Processed: {file_name}")
                time.sleep(1)  # Small delay between tests


if __name__ == "__main__":
    main()


